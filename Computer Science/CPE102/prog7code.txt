Program 7 linked list code


public class LL <E> implements Iterable <E>
{
   private Node head;
   private int size; //MAINTAIN

   private class Node
   {
      public E data;
      public Node next;

      public Node(E data)
      {
         this.data = data;
      }
   }

   public Iterator iterator()
   {
      return new MyListIterator;
   }

   public ListIterator listIterator()
   {
      return new MyListIterator;
   }
   

   private class MyListIterator implements ListIterator<E>
   {
      private Node cursor;

      public void remove()
      {
         throw new UnsupportedOperationException();
      }

      public boolean hasNext()
      {
         if(cursor == null)
         {
            return head != null;
         }
         else
         {
            return cursor.next != null;
         }
      }

      public E next()
      {
         if(!hasNext())
         {
            throw new NoSuchElementException();
         }
         if(cursor == null)
         {
            cursor = head;
         }
         else
         {
            cursor = cursor.next();
         }

         return cursor.data;
      }
   }
}



public void add(E data)
{
   Node temp = new Node(data);

   if(head == null)
   {
      head = temp;
   }
   else
   {
      Node walker = head;
      while(walker.next !=  null)
      {
         walker = walker.next;
      }
      walker.next = temp;
   }
}

public interface ListIterator<E> extends java.util.Iterator<E>
{
   public boolean hasPrevious();
   public E previous();
}