HW:
3.2: 10,13,15,16,20
4.1: 4,5,6,10,11,14,15,20,21,31,32,33,36,43

3.2 on board:
#20
f(n) = (n^3 +n^2 * logn)(logn + 1) + (17logn+19)(n^3 + 2)
O's        n^3             logn         logn       n^3
O's            (n^3 * logn)                 (n^3 * logn)
O's                           n^3 * logn

4.1 onboard:
#4
1^3 + 2^3 + .. + n^3 = (n(n+1)/2)^2
proof:
p(1): 1^3 = (1(1+1)/2)^2 true
p(k): 1^3 +2^3 + ... + k^3 = (k(k+1)/2)^2
prove p(k+1):
1^3 + ... + k^3 +(k+1)^3= ((k+1)(k+2)/2)^2
note: 1^3 + 2^3 + ... + k^3 + (k+1)^3
      |                     |
goes to: (k(k+1)/2)^2 + (k+1)^3
so:
(k+1)^2 * ((k^2)/4 + k+1) = (k+1)^2 * ((k^2 + 4x + 4)/4) ==========
(k+1)^2 * (k+1)^2)/2^2



Read:
3.2:
   examples 1-5
   theorems 2,3
   pg 186-187
interesting: 197-198
4.1:
   examples 1,2,3,5,6,8,9,10

Execution time depends on:
-function that describes the relationship between time and size of input
Ex:
Assume a machine, where each instructionuses 10^-6 seconds
Algorithm | Function T(n) | n= 9   |   n = 50 |    n = 1000
_______________________________________________________
Add n #s       linear     9*10^-6     5*10^-5      10^-3
multiply matrices   Triply nested loop, T(n)=cubic   7*10-4   1.2 seconds    16.7 seconds

^^ those are baby problems ^^

shortest path algorithm (TSP)   T(n)=2^n   10^-4   10^15(35 years)    2^1000 seconds(10^293 years)

**Heuristics** Code with intellegience(approximations etc)

Real Notes:
Order of Complexity: Estimate of  the growth of a function
   Ex: T(n) = 2n^2 + 5n + 5  = O(n^2)
        ^         ^f(x)          ^g(x)
  time complexity function     "big-O"

Definition:
Let f, g be functions
We say f(x)=O(g(x)) if there  exists c,k such that 
|f(x)| <= c |g(x)| for all x > k

Example:
let T(n)=2n^2 +5n-5
prove T(n) = O(n^2)
PROOF:
T(n) = 2n^2+5n-5 <= ............ <=c*n^2
T(n) = 2n^2 + 5n^2, 7n^2, c = 7, n^2>= 1 = k

let T(n)= 2n^2 + 5n + 5
PROOF:
T(n)= 2n^2+5n+5 <= 2n^2 + 5n^2 + 5n^2 = 12n^2 .... c = 12

let f(x) = x^2
prove f(x) != O(x)
PROOF:
let f(x) = O(x) -> x^2 <= c*x for all x > k
that means, through division: x < c for all x > k IMPOSSIBLE (in english: x is less than c for all numbers greater than k)


Theorems:
if f1(x) = O(g1(x))
   f2(x) = O(2(x))
then, (f1 + f2)(x) = O(max(g1(x), g2(x)))
then, (f1 * f2)(x) = O(g1(x) * g2(x))


BE AWARE:
big-Omega:
   let f,g be functions
   f(x) = omega(g(x)) if there exists c,k such that
      |f(x)| >= c|g(x)| for all x  >= k (essentially finding lower bound)


4.1:
Proof by Induction: used for proving something for "almost" every value
-basis: P(1) is true (1 is a small integer)
-inductive hypothesis: P(k) is true (k is an integer)
-conclusion:: Need to prove P(k+1) is true

Example: Prove 1+2+3+4+...+n = n(n+1)/2
