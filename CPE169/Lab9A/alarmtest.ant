--------------------------------------------------------------------------------
-- Copyright (c) 1995-2003 Xilinx, Inc.
-- All Right Reserved.
--------------------------------------------------------------------------------
--   ____  ____ 
--  /   /\/   / 
-- /___/  \  /    Vendor: Xilinx 
-- \   \   \/     Version : 9.1.03i
--  \   \         Application : ISE
--  /   /         Filename : alarmtest.ant
-- /___/   /\     Timestamp : Tue Jun 02 17:13:32 2009
-- \   \  /  \ 
--  \___\/\___\ 
--
--Command: 
--Design Name: alarmtest
--Device: Xilinx
--

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
USE IEEE.STD_LOGIC_TEXTIO.ALL;
USE STD.TEXTIO.ALL;

ENTITY alarmtest IS
END alarmtest;

ARCHITECTURE testbench_arch OF alarmtest IS
    FILE RESULTS: TEXT OPEN WRITE_MODE IS "C:\Documents and Settings\s169s4b1\Desktop\Lab9A\alarmtest.ano";

    COMPONENT TopUnit
        PORT (
            Btns : In std_logic_vector (3 DownTo 0);
            AccessCode : In std_logic_vector (3 DownTo 0);
            UserCode : In std_logic_vector (3 DownTo 0);
            Cs : Out std_logic_vector (6 DownTo 0);
            AN : Out std_logic_vector (3 DownTo 0);
            DP : Out std_logic;
            SYS_ARMED : Out std_logic;
            ALARM : Out std_logic;
            MCLK : In std_logic
        );
    END COMPONENT;

    SIGNAL Btns : std_logic_vector (3 DownTo 0) := "0000";
    SIGNAL AccessCode : std_logic_vector (3 DownTo 0) := "0000";
    SIGNAL UserCode : std_logic_vector (3 DownTo 0) := "0000";
    SIGNAL Cs : std_logic_vector (6 DownTo 0) := "0000000";
    SIGNAL AN : std_logic_vector (3 DownTo 0) := "0000";
    SIGNAL DP : std_logic := '0';
    SIGNAL SYS_ARMED : std_logic := '0';
    SIGNAL ALARM : std_logic := '0';
    SIGNAL MCLK : std_logic := '0';

    SHARED VARIABLE TX_ERROR : INTEGER := 0;
    SHARED VARIABLE TX_OUT : LINE;

    constant PERIOD : time := 200 ns;
    constant DUTY_CYCLE : real := 0.5;
    constant OFFSET : time := 100 ns;

    BEGIN
        UUT : TopUnit
        PORT MAP (
            Btns => Btns,
            AccessCode => AccessCode,
            UserCode => UserCode,
            Cs => Cs,
            AN => AN,
            DP => DP,
            SYS_ARMED => SYS_ARMED,
            ALARM => ALARM,
            MCLK => MCLK
        );

        PROCESS    -- clock process for MCLK
        BEGIN
            WAIT for OFFSET;
            CLOCK_LOOP : LOOP
                MCLK <= '0';
                WAIT FOR (PERIOD - (PERIOD * DUTY_CYCLE));
                MCLK <= '1';
                WAIT FOR (PERIOD * DUTY_CYCLE);
            END LOOP CLOCK_LOOP;
        END PROCESS;

        PROCESS    -- Annotation process for MCLK
            VARIABLE TX_TIME : INTEGER := 0;

            PROCEDURE ANNOTATE_Cs(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", Cs, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, Cs);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_AN(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", AN, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, AN);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_DP(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", DP, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, DP);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_SYS_ARMED(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", SYS_ARMED, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, SYS_ARMED);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_ALARM(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", ALARM, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, ALARM);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
        BEGIN
            WAIT for 1 fs;
            ANNOTATE_Cs(0);
            ANNOTATE_AN(0);
            ANNOTATE_DP(0);
            ANNOTATE_SYS_ARMED(0);
            ANNOTATE_ALARM(0);
            WAIT for OFFSET;
            TX_TIME := TX_TIME + 100;
            ANNO_LOOP : LOOP
                --Rising Edge
                WAIT for 115 ns;
                TX_TIME := TX_TIME + 115;
                ANNOTATE_Cs(TX_TIME);
                ANNOTATE_AN(TX_TIME);
                ANNOTATE_DP(TX_TIME);
                ANNOTATE_SYS_ARMED(TX_TIME);
                ANNOTATE_ALARM(TX_TIME);
                WAIT for 85 ns;
                TX_TIME := TX_TIME + 85;
            END LOOP ANNO_LOOP;
        END PROCESS;

        PROCESS
            BEGIN
                -- -------------  Current Time:  185ns
                WAIT FOR 185 ns;
                AccessCode <= "1111";
                UserCode <= "1110";
                -- -------------------------------------
                -- -------------  Current Time:  585ns
                WAIT FOR 400 ns;
                UserCode <= "1111";
                -- -------------------------------------
                -- -------------  Current Time:  1185ns
                WAIT FOR 600 ns;
                UserCode <= "0000";
                -- -------------------------------------
                -- -------------  Current Time:  1385ns
                WAIT FOR 200 ns;
                Btns <= "0100";
                -- -------------------------------------
                -- -------------  Current Time:  1785ns
                WAIT FOR 400 ns;
                UserCode <= "1110";
                -- -------------------------------------
                -- -------------  Current Time:  1985ns
                WAIT FOR 200 ns;
                UserCode <= "1111";
                -- -------------------------------------
                -- -------------  Current Time:  2185ns
                WAIT FOR 200 ns;
                Btns <= "0000";
                -- -------------------------------------
                -- -------------  Current Time:  2385ns
                WAIT FOR 200 ns;
                UserCode <= "0000";
                -- -------------------------------------
                WAIT FOR 97815 ns;

                STD.TEXTIO.write(TX_OUT, string'("Total[]"));
                STD.TEXTIO.writeline(RESULTS, TX_OUT);
                ASSERT (FALSE) REPORT
                    "Success! Simulation for annotation completed"
                    SEVERITY FAILURE;
            END PROCESS;

    END testbench_arch;

